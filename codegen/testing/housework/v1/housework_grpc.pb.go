// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: v1/housework.proto

package housework

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HouseworkClient is the client API for Housework service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseworkClient interface {
	Add(ctx context.Context, in *AddInput, opts ...grpc.CallOption) (*AddPayload, error)
	Complete(ctx context.Context, in *CompleteInput, opts ...grpc.CallOption) (*CompletePayload, error)
	Get(ctx context.Context, in *GetChoreInput, opts ...grpc.CallOption) (*Chore, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Chores, error)
}

type houseworkClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseworkClient(cc grpc.ClientConnInterface) HouseworkClient {
	return &houseworkClient{cc}
}

func (c *houseworkClient) Add(ctx context.Context, in *AddInput, opts ...grpc.CallOption) (*AddPayload, error) {
	out := new(AddPayload)
	err := c.cc.Invoke(ctx, "/housework.Housework/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseworkClient) Complete(ctx context.Context, in *CompleteInput, opts ...grpc.CallOption) (*CompletePayload, error) {
	out := new(CompletePayload)
	err := c.cc.Invoke(ctx, "/housework.Housework/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseworkClient) Get(ctx context.Context, in *GetChoreInput, opts ...grpc.CallOption) (*Chore, error) {
	out := new(Chore)
	err := c.cc.Invoke(ctx, "/housework.Housework/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseworkClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Chores, error) {
	out := new(Chores)
	err := c.cc.Invoke(ctx, "/housework.Housework/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseworkServer is the server API for Housework service.
// All implementations must embed UnimplementedHouseworkServer
// for forward compatibility
type HouseworkServer interface {
	Add(context.Context, *AddInput) (*AddPayload, error)
	Complete(context.Context, *CompleteInput) (*CompletePayload, error)
	Get(context.Context, *GetChoreInput) (*Chore, error)
	List(context.Context, *Empty) (*Chores, error)
	mustEmbedUnimplementedHouseworkServer()
}

// UnimplementedHouseworkServer must be embedded to have forward compatible implementations.
type UnimplementedHouseworkServer struct {
}

func (UnimplementedHouseworkServer) Add(context.Context, *AddInput) (*AddPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedHouseworkServer) Complete(context.Context, *CompleteInput) (*CompletePayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedHouseworkServer) Get(context.Context, *GetChoreInput) (*Chore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHouseworkServer) List(context.Context, *Empty) (*Chores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHouseworkServer) mustEmbedUnimplementedHouseworkServer() {}

// UnsafeHouseworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseworkServer will
// result in compilation errors.
type UnsafeHouseworkServer interface {
	mustEmbedUnimplementedHouseworkServer()
}

func RegisterHouseworkServer(s grpc.ServiceRegistrar, srv HouseworkServer) {
	s.RegisterService(&Housework_ServiceDesc, srv)
}

func _Housework_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseworkServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/housework.Housework/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseworkServer).Add(ctx, req.(*AddInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Housework_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseworkServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/housework.Housework/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseworkServer).Complete(ctx, req.(*CompleteInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Housework_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoreInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseworkServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/housework.Housework/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseworkServer).Get(ctx, req.(*GetChoreInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Housework_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseworkServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/housework.Housework/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseworkServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Housework_ServiceDesc is the grpc.ServiceDesc for Housework service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Housework_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "housework.Housework",
	HandlerType: (*HouseworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Housework_Add_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _Housework_Complete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Housework_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Housework_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/housework.proto",
}
