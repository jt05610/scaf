// Code generated by github.com/jt05610/scaf, DO NOT EDIT.
// Author: {{.Author}}
// Date: {{.Date}}

package server

{{- $pkgName := .Name}}
import (
	"context"
	"fmt"
	"{{.Name}}/v1"
	"sync"
)

type {{pascal .Name}}Server struct {
	mu     sync.Mutex
	chores []*{{.Name}}.Chore
	{{.Name}}.Unimplemented{{pascal .Name}}Server
}

{{- range .Types}}

func (h *{{pascal $pkgName}}Server) Get(_ context.Context, req *{{$pkgName}}.Get{{pascal .Name}}Input) (
*{{$pkgName}}.{{pascal .Name}}, error) {
    h.mu.Lock()
    defer h.mu.Unlock()
    for _, c := range h.{{pluralize (lower .Name)}} {
        if c.Id == req.Id {
            return c, nil
        }
    }
    return nil, fmt.Errorf("{{pascal .Name}} %d not found", req.Id)
}

func (h *{{pascal $pkgName}}Server) List(_ context.Context, _ *{{$pkgName}}.Empty) (
	*{{$pkgName}}.{{pluralize (pascal .Name)}}, error) {
	h.mu.Lock()
	defer h.mu.Unlock()
	if h.{{pluralize (lower .Name)}} == nil {
		h.{{pluralize (lower .Name)}} = make([]*{{$pkgName}}.{{pascal .Name}}, 0)
	}
	return &{{$pkgName}}.{{pluralize (pascal .Name)}}{
	    {{pluralize (pascal .Name)}}: h.{{pluralize (lower .Name)}},
    }, nil
}

{{- end}}

{{- range .Funcs}}
func (h *{{pascal $pkgName}}Server) {{.Name}}(_ context.Context, req *{{$pkgName}}.{{.Name}}Input) (
	*{{$pkgName}}.{{.Name}}Payload, error) {
	h.mu.Lock()
	defer h.mu.Unlock()

	return &{{lower $pkgName}}.{{.Name}}Payload{Message: "implement me please"}, nil
}

{{- end}}

func Service() {{.Name}}.{{pascal .Name}}Server {
	return &{{pascal .Name}}Server{
		chores: make([]*{{.Name}}.Chore, 0),
	}
}
