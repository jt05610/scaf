// Code generated by github.com/jt05610/scaf, DO NOT EDIT.
// Author: {{.Author}}
// Date: {{.Date}}

package cmd

import (
	"fmt"
	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"{{.Name}}/v{{.Version}}/graph"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/spf13/cobra"
)

var addr string
var port int

// relayCmd represents the serve command
var relayCmd = &cobra.Command{
	Use:   "relay",
	Short: "Runs the graphql relay server",
	Long: ``,
	Run: func(cmd *cobra.Command, args []string) {
		cert, err := secrets.ReadFile(".secrets/{{.Name}}.local+3.pem")
		if err != nil {
			log.Fatal(err)
		}
		mux := http.NewServeMux()
		srv := handler.NewDefaultServer(
			graph.NewExecutableSchema(
				graph.Config{Resolvers: graph.NewResolver(cert)},
			),
		)

		mux.Handle("/", playground.Handler("GraphQL playground", "/query"))
		mux.Handle("/query", srv)

		c := make(chan os.Signal, 1)
		signal.Notify(c, os.Interrupt)

		s := &http.Server{
			Addr:        addr,
			Handler:     mux,
			IdleTimeout: time.Duration(60) * time.Second,
			ReadTimeout: time.Duration(30) * time.Second,
		}
		go func() {
			for {
				if <-c == os.Interrupt {
					_ = s.Close()
				}
			}
		}()
		fmt.Printf("Listening on %s\n", s.Addr)
		err = s.ListenAndServe()
		if err != nil && err != http.ErrServerClosed {
			log.Fatal(err)
		}
	},
}

func init() {
	rootCmd.AddCommand(relayCmd)
	relayCmd.Flags().StringVarP(&addr, "addr", "a", ":{{.PortMap.GQL}}", "address to listen on")
	relayCmd.Flags().IntVarP(&port, "port", "p", {{.PortMap.GQL}}, "port to listen on")
}
