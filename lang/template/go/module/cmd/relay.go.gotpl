// Code generated by github.com/jt05610/scaf, DO NOT EDIT.
// Author: {{.Author}}
// Date: {{.Date}}

package cmd

import (
	"fmt"
	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"{{.Name}}/v{{.Version}}/graph"
	"log"
	"io"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/spf13/cobra"
)

var addr string
var port int

func runRelay() {
    tmpDir := os.TempDir()
    certFile, err := os.Create(tmpDir + "{{.Name}}.local+3.pem")
    if err != nil {
        log.Fatal(err)
    }
    defer os.Remove(certFile.Name())
    keyFile, err := os.Create(tmpDir + "{{.Name}}.local+3-key.pem")
    if err != nil {
        log.Fatal(err)
    }
    defer os.Remove(keyFile.Name())

    cert, err := secrets.Open(".secrets/{{.Name}}.local+3.pem")
    if err != nil {
        log.Fatal(err)
    }
    io.Copy(certFile, cert)
    cert.Close()
    certContent, err := secrets.ReadFile(".secrets/{{.Name}}.local+3.pem")
    if err != nil {
        log.Fatal(err)
    }
    key, err := secrets.Open(".secrets/{{.Name}}.local+3-key.pem")
    if err != nil {
        log.Fatal(err)
    }
    defer key.Close()
    io.Copy(keyFile, key)
    mux := http.NewServeMux()
    srv := handler.NewDefaultServer(
        graph.NewExecutableSchema(
            graph.Config{Resolvers: graph.NewResolver(certContent)},
        ),
    )

    mux.Handle("/", playground.Handler("GraphQL playground", "/query"))
    mux.Handle("/query", srv)

    c := make(chan os.Signal, 1)
    signal.Notify(c, os.Interrupt)

    s := &http.Server{
        Addr:        addr,
        Handler:     mux,
        IdleTimeout: time.Duration(60) * time.Second,
        ReadTimeout: time.Duration(30) * time.Second,
    }
    go func() {
        for {
            if <-c == os.Interrupt {
                _ = s.Close()
            }
        }
    }()
    fmt.Printf("ðŸ¦„ {{.Name}} server listening on https://localhost:%d\n", port)
    err = s.ListenAndServeTLS(certFile.Name(), keyFile.Name())
    if err != nil && err != http.ErrServerClosed {
        log.Fatal(err)
    }
}

// relayCmd represents the serve command
var relayCmd = &cobra.Command{
	Use:   "relay",
	Short: "Runs the graphql relay server",
	Long: ``,
	Run: func(cmd *cobra.Command, args []string) {
        runRelay()
    },

}

func init() {
	rootCmd.AddCommand(relayCmd)
	relayCmd.Flags().StringVarP(&addr, "addr", "a", ":{{.PortMap.GQL}}", "address to listen on")
	relayCmd.Flags().IntVarP(&port, "port", "p", {{.PortMap.GQL}}, "port to listen on")
}
