# Code generated by github.com/jt05610/scaf, DO NOT EDIT.
# Author: {{.Author}}
# Date: {{.Date}}

import grpc
from concurrent import futures
from threading import Lock

# Import the generated classes
import {{.Name}}_pb2
import {{.Name}}_pb2_grpc

class {{pascal .Name}}Server({{.Name}}_pb2_grpc.{{pascal .Name}}Servicer):
    def __init__(self):
        self.mu = Lock()
        self.chores = []

{{- range .Funcs}}
    def {{.Name}}(self, request, context):
        with self.mu:
            # Here you should implement your logic and return appropriate result.
            return {{.Name}}_pb2.{{.Name}}Payload(message="implement me please")
{{end}}

def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    {{.Name}}_pb2_grpc.add_{{pascal .Name}}Servicer_to_server({{pascal .Name}}Server(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    server.wait_for_termination()

if __name__ == '__main__':
    serve()
